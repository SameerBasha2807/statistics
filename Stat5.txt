Q1: What is Estimation Statistics? Explain point estimate and interval estimate.
Estimation Statistics:

Estimation in statistics refers to the process of inferring or estimating the value of a population parameter based on a sample statistic. Since it's often impractical to measure an entire population, statisticians use sample data to estimate population parameters like the mean, variance, or proportion.
Point Estimate:

A point estimate is a single value given as an estimate of a population parameter. It is derived from the sample data and serves as the best guess or approximation of the population parameter.
Example: If you calculate the mean height of a sample of 100 people, this sample mean is a point estimate of the population mean.
Interval Estimate:

An interval estimate provides a range of values within which the population parameter is expected to lie. This range is calculated using the sample data and a certain confidence level, which reflects the level of certainty that the interval contains the true population parameter.
Example: A 95% confidence interval for the mean height might be [170 cm, 180 cm], indicating that we are 95% confident that the true population mean lies within this range.
Q2. Write a Python function to estimate the population mean using a sample mean and standard deviation.
Here's a Python function to estimate the population mean with a given sample mean, sample standard deviation, and sample size:

python
Copy code
import math
from scipy.stats import t

def estimate_population_mean(sample_mean, sample_std_dev, sample_size, confidence_level):
    # Calculate the t-critical value for the given confidence level
    alpha = 1 - confidence_level
    t_critical = t.ppf(1 - alpha/2, df=sample_size-1)
    
    # Calculate the margin of error
    margin_of_error = t_critical * (sample_std_dev / math.sqrt(sample_size))
    
    # Calculate the confidence interval
    lower_bound = sample_mean - margin_of_error
    upper_bound = sample_mean + margin_of_error
    
    return (lower_bound, upper_bound)

# Example usage
sample_mean = 500
sample_std_dev = 50
sample_size = 50
confidence_level = 0.95

interval = estimate_population_mean(sample_mean, sample_std_dev, sample_size, confidence_level)
print(f"95% Confidence Interval: {interval}")
Q3: What is Hypothesis Testing? Why is it used? State the importance of Hypothesis Testing.
Hypothesis Testing:

Hypothesis testing is a statistical method used to make decisions or inferences about a population parameter based on sample data. It involves testing an assumption (hypothesis) by determining whether there is enough evidence from the sample data to reject it.
Why is it Used?:

Hypothesis testing is used to assess the validity of a claim or assumption about a population. It's a fundamental process in research, helping to determine if observed data deviates from what is expected under a null hypothesis.
Importance of Hypothesis Testing:

Hypothesis testing provides a structured approach to decision-making in research. It helps scientists, engineers, and business analysts assess the effectiveness of treatments, the quality of products, and the relationships between variables. It's crucial for verifying theories and guiding decisions based on data.
Q4. Create a hypothesis that states whether the average weight of male college students is greater than the average weight of female college students.
Hypotheses:

Null Hypothesis (
𝐻
0
H 
0
​
 ): The average weight of male college students is equal to or less than the average weight of female college students.

𝐻
0
:
𝜇
male
≤
𝜇
female
H 
0
​
 :μ 
male
​
 ≤μ 
female
​
 
Alternative Hypothesis (
𝐻
1
H 
1
​
 ): The average weight of male college students is greater than the average weight of female college students.

𝐻
1
:
𝜇
male
>
𝜇
female
H 
1
​
 :μ 
male
​
 >μ 
female
​
 
Q5. Write a Python script to conduct a hypothesis test on the difference between two population means, given a sample from each population.
Here's a Python script to conduct a two-sample t-test to compare the means of two independent samples:

python
Copy code
import numpy as np
from scipy.stats import ttest_ind

def two_sample_t_test(sample1, sample2, alpha=0.05):
    # Calculate the t-statistic and p-value
    t_stat, p_value = ttest_ind(sample1, sample2)
    
    # Decision rule
    if p_value < alpha:
        return f"Reject the null hypothesis (p-value = {p_value})"
    else:
        return f"Fail to reject the null hypothesis (p-value = {p_value})"

# Example usage
sample1 = np.random.normal(70, 10, 30)  # Sample from population 1
sample2 = np.random.normal(65, 8, 30)   # Sample from population 2

result = two_sample_t_test(sample1, sample2)
print(result)
Q6: What is a Null and Alternative Hypothesis? Give some examples.
Null Hypothesis (
𝐻
0
H 
0
​
 ):

The null hypothesis is a statement that there is no effect or no difference, and it is the hypothesis that is tested. It represents the status quo or a baseline assumption.
Alternative Hypothesis (
𝐻
1
H 
1
​
 ):

The alternative hypothesis is a statement that there is an effect or a difference, and it represents the conclusion that the researcher is trying to establish.
Examples:

Testing a New Drug:
𝐻
0
H 
0
​
 : The new drug has no effect on blood pressure.
𝐻
1
H 
1
​
 : The new drug lowers blood pressure.
Quality Control:
𝐻
0
H 
0
​
 : The mean weight of products is 5 pounds.
𝐻
1
H 
1
​
 : The mean weight of products is not 5 pounds.
Q7: Write down the steps involved in Hypothesis Testing.
Steps in Hypothesis Testing:

State the Hypotheses:

Formulate the null hypothesis (
𝐻
0
H 
0
​
 ) and the alternative hypothesis (
𝐻
1
H 
1
​
 ).
Choose the Significance Level (
𝛼
α):

Select a significance level (commonly 
𝛼
=
0.05
α=0.05) that defines the probability of rejecting the null hypothesis when it is actually true.
Select the Appropriate Test:

Choose the statistical test based on the type of data and the research question (e.g., t-test, chi-square test).
Calculate the Test Statistic:

Compute the test statistic (e.g., t-statistic, z-score) using the sample data.
Determine the p-value:

Find the p-value, which indicates the probability of observing the test statistic under the null hypothesis.
Make a Decision:

Compare the p-value to the significance level 
𝛼
α.
If 
𝑝
≤
𝛼
p≤α, reject the null hypothesis; otherwise, fail to reject it.
Draw a Conclusion:

Interpret the results in the context of the research question.
Q8. Define p-value and explain its significance in Hypothesis Testing.
p-value:

The p-value is the probability of obtaining a test statistic at least as extreme as the one observed, assuming that the null hypothesis is true. It quantifies the evidence against the null hypothesis.
Significance:

The p-value helps in determining whether the observed data provides enough evidence to reject the null hypothesis. A low p-value (typically less than 0.05) suggests that the observed data is unlikely under the null hypothesis, leading to its rejection in favor of the alternative hypothesis.
Q9. Generate a Student's t-distribution plot using Python's matplotlib library, with the degrees of freedom parameter set to 10.
python
Copy code
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import t

# Generate values for the t-distribution
df = 10  # degrees of freedom
x = np.linspace(-4, 4, 1000)
y = t.pdf(x, df)

# Plotting the t-distribution
plt.plot(x, y, label=f't-distribution (df={df})')
plt.title("Student's t-Distribution")
plt.xlabel('t')
plt.ylabel('Probability Density')
plt.legend()
plt.grid(True)
plt.show()
Q10. Write a Python program to calculate the two-sample t-test for independent samples, given two random samples of equal size and a null hypothesis that the population means are equal.
python
Copy code
import numpy as np
from scipy.stats import ttest_ind

def two_sample_t_test(sample1, sample2, alpha=0.05):
    # Perform the t-test
    t_stat, p_value = ttest_ind(sample1, sample2)
    
    # Decision rule
    if p_value < alpha:
        return f"Reject the null hypothesis (p-value = {p_value})"
    else:
        return f"Fail to reject the null hypothesis (p-value = {p_value})"

# Example usage
sample1 = np.random.normal(50, 5, 30)  # Sample 1
sample2 = np.random.normal(55, 5, 30)  # Sample 2

result = two_sample_t_test(sample1, sample2)
print(result)
Q11: What is Student’s t distribution? When to use the t-Distribution.
Student’s t-distribution:

The t-distribution is a probability distribution that is symmetric and bell-shaped, like the normal distribution, but with heavier tails. It is used when the sample size is small, and the population standard deviation is unknown.
When to Use the t-Distribution:

The t-distribution is used instead of the normal distribution when dealing with small sample sizes (typically 
𝑛
<
30
n<30) and when the population standard deviation is not known. It is particularly important in hypothesis testing and confidence intervals involving means.
Q12: What is t-statistic? State the formula for t-statistic.
t-statistic:

The t-statistic is a standardized value used in hypothesis testing to compare the sample mean to the population mean, or to compare the means of two samples. It measures how far the sample mean deviates from the population mean in units of standard error.
Formula:

For a single sample:
𝑡
=
𝑋
ˉ
−
𝜇
𝑠
𝑛
t= 
n
​
 
s
​
 
X
ˉ
 −μ
​
 
where:

𝑋
ˉ
X
ˉ
  = sample mean

𝜇
μ = population mean (under the null hypothesis)

𝑠
s = sample standard deviation

𝑛
n = sample size

For two independent samples:

𝑡
=
𝑋
1
ˉ
−
𝑋
2
ˉ
𝑠
1
2
𝑛
1
+
𝑠
2
2
𝑛
2
t= 
n 
1
​
 
s 
1
2
​
 
​
 + 
n 
2
​
 
s 
2
2
​
 
​
 
​
 
X 
1
​
 
ˉ
​
 − 
X 
2
​
 
ˉ
​
 
​
 
where:

𝑋
1
ˉ
,
𝑋
2
ˉ
X 
1
​
 
ˉ
​
 , 
X 
2
​
 
ˉ
​
  = sample means
𝑠
1
2
,
𝑠
2
2
s 
1
2
​
 ,s 
2
2
​
  = sample variances
𝑛
1
,
𝑛
2
n 
1
​
 ,n 
2
​
  = sample sizes
Q13. A coffee shop owner wants to estimate the average daily revenue for their shop. They take a random sample of 50 days and find the sample mean revenue to be $500 with a standard deviation of $50. Estimate the population mean revenue with a 95% confidence interval.
Using the formula for a confidence interval for the population mean:

Confidence Interval
=
𝑋
ˉ
±
𝑡
𝛼
/
2
×
𝑠
𝑛
Confidence Interval= 
X
ˉ
 ±t 
α/2
​
 × 
n
​
 
s
​
 
where:

𝑋
ˉ
=
500
X
ˉ
 =500 (sample mean)
𝑠
=
50
s=50 (sample standard deviation)
𝑛
=
50
n=50 (sample size)
𝑡
𝛼
/
2
t 
α/2
​
  is the t-critical value for a 95% confidence level with 
𝑑
𝑓
=
49
df=49.
python
Copy code
import math
from scipy.stats import t

# Given values
sample_mean = 500
sample_std_dev = 50
sample_size = 50
confidence_level = 0.95

# Calculate the t-critical value
alpha = 1 - confidence_level
t_critical = t.ppf(1 - alpha/2, df=sample_size-1)

# Calculate the margin of error
margin_of_error = t_critical * (sample_std_dev / math.sqrt(sample_size))

# Calculate the confidence interval
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

confidence_interval = (lower_bound, upper_bound)
print(f"95% Confidence Interval: {confidence_interval}")
Q14. A researcher hypothesizes that a new drug will decrease blood pressure by 10 mmHg. They conduct a clinical trial with 100 patients and find that the sample mean decrease in blood pressure is 8 mmHg with a standard deviation of 3 mmHg. Test the hypothesis with a significance level of 0.05.
Step 1: State the Hypotheses:

Null Hypothesis (
𝐻
0
H 
0
​
 ): The mean decrease in blood pressure is 10 mmHg.
Alternative Hypothesis (
𝐻
1
H 
1
​
 ): The mean decrease in blood pressure is not 10 mmHg.
Step 2: Calculate the t-statistic:

𝑡
=
𝑋
ˉ
−
𝜇
𝑠
𝑛
t= 
n
​
 
s
​
 
X
ˉ
 −μ
​
 
where:

𝑋
ˉ
=
8
X
ˉ
 =8
𝜇
=
10
μ=10
𝑠
=
3
s=3
𝑛
=
100
n=100
python
Copy code
import math
from scipy.stats import t

# Given values
sample_mean = 8
population_mean = 10
sample_std_dev = 3
sample_size = 100
alpha = 0.05

# Calculate the t-statistic
t_statistic = (sample_mean - population_mean) / (sample_std_dev / math.sqrt(sample_size))

# Calculate the t-critical value for a two-tailed test
t_critical = t.ppf(1 - alpha/2, df=sample_size-1)

# Determine whether to reject the null hypothesis
if abs(t_statistic) > t_critical:
    print(f"Reject the null hypothesis (t-statistic = {t_statistic})")
else:
    print(f"Fail to reject the null hypothesis (t-statistic = {t_statistic})")
Q15. An electronics company produces a certain type of product with a mean weight of 5 pounds and a standard deviation of 0.5 pounds. A random sample of 25 products is taken, and the sample mean weight is found to be 4.8 pounds. Test the hypothesis that the true mean weight of the products is less than 5 pounds with a significance level of 0.01.
Step 1: State the Hypotheses:

Null Hypothesis (
𝐻
0
H 
0
​
 ): The mean weight of the products is 5 pounds.
Alternative Hypothesis (
𝐻
1
H 
1
​
 ): The mean weight of the products is less than 5 pounds.
Step 2: Calculate the t-statistic:

python
Copy code
import math
from scipy.stats import t

# Given values
sample_mean = 4.8
population_mean = 5
sample_std_dev = 0.5
sample_size = 25
alpha = 0.01

# Calculate the t-statistic
t_statistic = (sample_mean - population_mean) / (sample_std_dev / math.sqrt(sample_size))

# Calculate the t-critical value for a one-tailed test
t_critical = t.ppf(alpha, df=sample_size-1)

# Determine whether to reject the null hypothesis
if t_statistic < t_critical:
    print(f"Reject the null hypothesis (t-statistic = {t_statistic})")
else:
    print(f"Fail to reject the null hypothesis (t-statistic = {t_statistic})")
Q16. Two groups of students are given different study materials to prepare for a test. The first group (n1 = 30) has a mean score of 80 with a standard deviation of 10, and the second group (n2 = 40) has a mean score of 75 with a standard deviation of 8. Test the hypothesis that the population means for the two groups are equal with a significance level of 0.01.
Step 1: State the Hypotheses:

Null Hypothesis (
𝐻
0
H 
0
​
 ): The population means of the two groups are equal.
Alternative Hypothesis (
𝐻
1
H 
1
​
 ): The population means of the two groups are not equal.
Step 2: Calculate the t-statistic:

python
Copy code
import math
from scipy.stats import t

# Given values
n1, n2 = 30, 40
mean1, mean2 = 80, 75
std_dev1, std_dev2 = 10, 8
alpha = 0.01

# Calculate the pooled standard deviation
pooled_std_dev = math.sqrt(((n1-1)*std_dev1**2 + (n2-1)*std_dev2**2) / (n1 + n2 - 2))

# Calculate the t-statistic
t_statistic = (mean1 - mean2) / (pooled_std_dev * math.sqrt(1/n1 + 1/n2))

# Calculate the t-critical value for a two-tailed test
t_critical = t.ppf(1 - alpha/2, df=n1 + n2 - 2)

# Determine whether to reject the null hypothesis
if abs(t_statistic) > t_critical:
    print(f"Reject the null hypothesis (t-statistic = {t_statistic})")
else:
    print(f"Fail to reject the null hypothesis (t-statistic = {t_statistic})")
Q17. A marketing company wants to estimate the average number of ads watched by viewers during a TV program. They take a random sample of 50 viewers and find that the sample mean is 4 with a standard deviation of 1.5. Estimate the population mean with a 99% confidence interval.
Using the formula for a confidence interval for the population mean:

Confidence Interval
=
𝑋
ˉ
±
𝑡
𝛼
/
2
×
𝑠
𝑛
Confidence Interval= 
X
ˉ
 ±t 
α/2
​
 × 
n
​
 
s
​
 
where:

𝑋
ˉ
=
4
X
ˉ
 =4 (sample mean)
𝑠
=
1.5
s=1.5 (sample standard deviation)
𝑛
=
50
n=50 (sample size)
𝑡
𝛼
/
2
t 
α/2
​
  is the t-critical value for a 99% confidence level with 
𝑑
𝑓
=
49
df=49.
python
Copy code
import math
from scipy.stats import t

# Given values
sample_mean = 4
sample_std_dev = 1.5
sample_size = 50
confidence_level = 0.99

# Calculate the t-critical value
alpha = 1 - confidence_level
t_critical = t.ppf(1 - alpha/2, df=sample_size-1)

# Calculate the margin of error
margin_of_error = t_critical * (sample_std_dev / math.sqrt(sample_size))

# Calculate the confidence interval
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

confidence_interval = (lower_bound, upper_bound)
print(f"99% Confidence Interval: {confidence_interval}")